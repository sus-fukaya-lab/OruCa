services:
 # 開発用 Vite
  vite:
    build:
      context: ./vite
      dockerfile: Dockerfile
    container_name: ORuCa_vite
    volumes:
      - ./vite:/app:rw
    ports: # 開発時に直接アクセスしたい場合はコメント解除
      - "4000:4000"
    command: ["tail","-f","/dev/null"]
    networks:
      - oruca_network 
    profiles:
      - "dev"

  # 本番用 Nginx
  web:
    build:
      context: web
    container_name: ORuCa_web
    # ports: # リバースプロキシ経由のためコメントアウト
      # - "4040:80"
    volumes:
      - ./vite/dist:/usr/share/nginx/html:ro
    depends_on:
      - api # apiがmysqlに依存するため、これでmysql起動後になる
    networks:
      - oruca_network
    profiles:
      - "prod"

  # mysql
  mysql:
    build:
      context: mysql
      args:
        MYSQL_DATABASE : ${MYSQL_DATABASE}
        MYSQL_USER : ${MYSQL_USER}
        MYSQL_PASSWORD : ${MYSQL_PASSWORD}
        MYSQL_ROOT_PASSWORD : ${MYSQL_ROOT_PASSWORD}
    container_name: ORuCa_mysql
    env_file:
      - .env
    volumes:
      - ./mysql/data/init.sql:/docker-entrypoint-initdb.d/init.sql
      - mysql_data:/var/lib/mysql
    # ports: # 外部から直接DBにアクセスしない場合はコメントアウト推奨
      # - "3306:3306"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      retries: 3
      start_period: 10s
      timeout: 10s
    networks:
      - oruca_network

  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: ORuCa_api
    volumes:
      - ./api:/app:rw
    ports:
      - "3000:3000"
    env_file: # DATABASE_URLは.envファイルまたはアプリケーションコード内で設定される想定
      - .env
    command: ["yarn","start"]
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - oruca_network

  nfc:
    container_name: ORuCa_nfc
    build:
      context: nfc
    init: true
    volumes:
      - ./nfc:/app:rw
    environment:
      - TZ=Asia/Tokyo
    command: ["python","main.py"]
    depends_on:
      mysql: # nfcサービスもmysqlに依存する場合
        condition: service_healthy
    devices:
      - "/dev/bus/usb:/dev/bus/usb"
    networks:
      - oruca_network


networks:
  oruca_network : # リバースプロキシのdocker-compose.ymlで定義・作成されるネットワークを参照
    external: true
    name: oruca_network # リバースプロキシ側で指定した固定名と合わせる

volumes:
  mysql_data: {}